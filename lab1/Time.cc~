// I denna fil l√§ggs definitionerna (implementationen) av de funktioner
// som deklarerats i Time.h
// w++17 test_main.o Time.cc time_test.cc
#include "Time.h"

Time::Time(int hour, int minute, int second)
    : h{hour}, m{minute}, s{second}, am{false}
{
    if(hour < 0 || hour > 23 ||
       minute < 0 || minute > 59 ||
       second < 0 || second > 59)
    {
        throw std::logic_error{"Invalid time value"};
    }
    if(hour < 12)
    {
        am = true;
    }
}
/*
Time::Time(std::string const& time)
    : h{stoi(time.substr(0,2))}, m{stoi(time.substr(3,2))},
      s{stoi(time.substr(6,2))}, am{false}
{
    if(h < 0 || h > 23 ||
       m < 0 || m > 59 ||
       s < 0 || s > 59){
        throw std::logic_error{"Invalid time value"};
    }
}
 */
Time::Time(std::string const& time)
    : h{}, m{}, s{}, am{}
{
    char c;
    std::stringstream ss;
    ss << time;
    ss >> h >> c >> m >> c >> s;
    if(h < 0 || h > 23 ||
       m < 0 || m > 59 ||
       s < 0 || s > 59)
    {
        throw std::logic_error("Invalid time value");
    }
}

int Time::to_int(std::string const& time) const
{
    std::stringstream ss;
    int result;
    ss << time;
    ss >> result;
    return result;
}
std::string Time::to_string(bool format)
{
    std::string formatted;
    //format indicates wether or not to use 12hr format
    formatted = construct_string(h,m,s,format);
    return formatted;
}
int Time::transform_format(int h, bool format)
{
    int result = h;
    if(format && h > 12)
    {
        //Transform from 24h format to 12h
        result = h-12;
    }else
    {
        //Transform from 12h to 24h
        //TODO
    }
    return result;
}
std::string Time::construct_string(int h, int m, int s, bool format)
{
    std::string time;
    std::vector<int> v = {transform_format(h,format),m,s};
    for(int n : v)
    {
        if(n < 10)
        {
            time += '0';
            time += n+'0';
        }else
        {
            time += std::to_string(n);
        }
        time += ':';
    }
    time.pop_back(); //Remove trailing ':' (Fix this in a better way?)
    apply_period(&time, format);
    return time;
}

std::ostream &operator<< (std::ostream &os, Time time){
    os << time.to_string();
    return os;
}

Time::operator std::string()
{
    std::string time = construct_string(h,m,s,false);
    return time;
}

Time Time::operator+(int add)
{
    if(add < 0)
    {
        //Convert to positive
        add += (add*-2);
    }
    s+=add;
    if(s > 59)
    {
        int add_min = s/59; //Find minutes to add
        s-=add; //Seconds-value after accounting for minutes
        m+=add_min;
    }
    return *this;
}



Time& Time::operator++()
{
    if (s < 59)
    {
        s+=1;
    }
    else if (m < 59 && s == 59)
    {
        s=0;
        m+=1;
    }
    else if (h < 23 && m == 59 && s == 59)
    {
        s=0;
        m=0;
        h+=1;
    }
    else
    {
        s=0;
        m=0;
        h=0;
    }
    return *this;
}


//Using pointer
void Time::apply_period(std::string* input, bool const format)
{
    //Apply proper "period" if 12h format
    if(format)
    {
        std::string meridiem = " pm";
        if(h < 12)
        {
            meridiem = " am";
            *input += meridiem;
        }else
        {
            meridiem = " pm";
            *input += meridiem;
        }
    }
}
//Using reference
void Time::apply_period(std::string &input, bool const format)
{
    //Apply proper "period" if 12h format
    if(format)
    {
        std::string meridiem = " pm";
        if(h < 12)
        {
            meridiem = " am";
            input += meridiem;
        }else
        {
            meridiem = " pm";
            input += meridiem;
        }
    }
}
bool Time::is_am() const
{
    return am;
}
int Time::hour() const
{
    return h;
}
int Time::minute() const
{
    return m;
}
int Time::second() const
{
    return s;
}
